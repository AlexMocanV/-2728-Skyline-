#include <fstream>
#include <stack>
std::string nume="skyline";
std::ifstream fin(nume+".in");
std::ofstream fout(nume+".out");
unsigned long long sum[100001];
std::stack<int>stiv;
int d[100001];
int h[100001];
int s[100001];
int main()
{

    int n,l;
    fin>>n;

    for(int i=1;i<=n;i++)
    {
        fin>>h[i]>>l;
        sum[i]=sum[i-1]+l;
    }
    for(int i=1;i<=n;++i)
    {
        while(!stiv.empty()&&h[i]<h[stiv.top()])
        {
            d[stiv.top()]=i;
            stiv.pop();
        }
        stiv.push(i);
    }
    for(int i=1;i<=n;i++)
    {
        if(d[i]==0)
        d[i]=1;
    }
    for(int i=1;i<=n;i++)
    {
        if(s[i]==0)
        s[i]=1;
    }
    while(!stiv.empty())
    {
        stiv.pop();
    }
    for(int i=1;i<=n;++i)
    {
        while(!stiv.empty()&&h[i]<=h[stiv.top()])
        {
            stiv.pop();
        }
        if(!stiv.empty())
        {
            s[i]=stiv.top();
        }
        else
        {
            s[i]=0;
        }
        stiv.push(i);
    }
    long long ariem=0;
    sum[0]=sum[n];
    for(int j=1;j<=n;j++)
    {
        //fout<<h[j]<<' '<<sum[d[j]-1]<<' '<<sum[s[j]]<<'\n';
        if(d[j]>=1)
        {
            long long arie=h[j]*(sum[d[j]-1]-sum[s[j]]);
            //fout<<arie<<' ';
            ariem=std::max(ariem,arie);
        }
    }
    fout<<ariem;
    return 0;
}
/*
d  next smaller element
s  previous smaller element
8
1 3 6 5 2 1 9 6
*/
